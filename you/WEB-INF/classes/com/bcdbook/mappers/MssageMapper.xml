<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 设置映射的dao类 -->
<mapper namespace="com.bcdbook.message.dao.MessageDao">

	<resultMap id="BaseResultMap" type="com.bcdbook.message.pojo.Message">
		<id column="id" property="id" jdbcType="INTEGER" />
		<id column="proj_id" property="projId" jdbcType="INTEGER" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="content" property="content" jdbcType="VARCHAR" />		
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="read_type" property="readType" jdbcType="INTEGER" />
		<result column="msg_from" property="msgFrom" jdbcType="INTEGER" />
	    <result column="photo" property="photo" jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
		<result column="msg_to" property="msgTo" jdbcType="INTEGER" />
		<result column="add_time" property="addTime" jdbcType="VARCHAR" />	
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="name" property="projName" jdbcType="VARCHAR" />	
		<result column="username" property="userName" jdbcType="VARCHAR" />	
		<result column="phone" property="phone" jdbcType="VARCHAR" />
			
	</resultMap>	
	<!-- 1.定义查询的所有参数 -->
	<sql id="Base_Column_List">
		t_message.id as id, title, content,type,read_type,msg_from,t_user.photo as photo,t_user.nickname as nickname,msg_to,t_message.add_time as add_time,t_message.update_time as update_time
	</sql>
	<!-- 2.定义查询的所有参数 -->
	<sql id="Base_Column_List0">
		t_message.id as id, title, content,t_message.type as type,read_type,msg_from,t_user.photo as photo,t_user.nickname as nickname,msg_to,FROM_UNIXTIME(LEFT(t_message.add_time,10),"%Y-%m-%d") as add_time ,t_message.update_time as update_time,name,username,phone
	</sql>		
	
		<!-- 1.增加一条消息记录 -->
	<insert id="insert" parameterType="com.bcdbook.message.pojo.Message">
		insert into t_message (id,proj_id, title, content,type,read_type,msg_from,msg_to,add_time,update_time)
		values (#{id,jdbcType=INTEGER},
		#{projId,jdbcType=VARCHAR},
		#{title,jdbcType=VARCHAR},
		#{content,jdbcType=VARCHAR},		
		#{type,jdbcType=INTEGER},
		#{readType,jdbcType=INTEGER},
		#{msgFrom,jdbcType=INTEGER},		
		#{msgTo,jdbcType=INTEGER},				
		#{addTime,jdbcType=VARCHAR},
		#{updateTime,jdbcType=VARCHAR})
	</insert>
	
	<!-- 2.根据指定id更新一个项目记录 -->
	<update id="updateMessageById">
	update t_message

	<set>
		<if test="msg.title != null">
			title = #{msg.title,jdbcType=VARCHAR},
		</if>
		<if test="msg.content != null">
			content = #{msg.content,jdbcType=VARCHAR},
		</if>

		<if test="msg.type != null">
			type = #{msg.type,jdbcType=INTEGER},
		</if>
		<if test="msg.readType != null">
			read_type = #{msg.readType,jdbcType=INTEGER},
		</if>
		<if test="msg.msgFrom != null">
			msg_from = #{msg.msgFrom,jdbcType=INTEGER},
		</if>
		<if test="msg.msgTo != null">
			msg_to = #{msg.msgTo,jdbcType=INTEGER},
		</if>
		<if test="msg.addTime != null">
			add_time = #{msg.addTime,jdbcType=VARCHAR},
		</if>
		<if test="msg.createTime != null">
			update_time = #{msg.updateTime,jdbcType=VARCHAR},
		</if>		
		</set>
	where id =
	#{MsgId,jdbcType=INTEGER}
</update>





<!--4. 根据用户id查询和他相关的消息（只是收到的）-->
	<select id="listMsgByUIdAndType" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_message JOIN t_user ON t_message.msg_from=t_user.id
		where msg_to = #{userId,jdbcType=INTEGER} 
		<if test="type !=null">
			AND type=#{type,jdbcType=INTEGER}		
		</if>	
	</select>
	
	<!--5. 根据id查找指定消息 -->
	<select id="listMsgByUId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_message
		where msg_to = #{MsgId,jdbcType=INTEGER} 		
	</select>
	
<!--6. 根据用户id查询和他相关的消息（只是收到的）-->
	<select id="getReportMsgList" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List0" />
		from t_message JOIN t_project ON t_message.proj_id=t_project.id JOIN 
		     t_user ON t_message.msg_from=t_user.id
		where t_message.type = 2 AND
		      read_type=1 limit #{startPage},#{pageSize}
		<!--未读 的投诉消息  -->
	</select>
	
	
	
	
	<!--7.获取按当前分页大小被举报未审核过的消息分页总页数）-->
	<select id="countReportMsgPage" resultType="int">	
		select
			ceil(count(t_message.id)/#{pageSize})
		from t_message 
		where t_message.type = 2 AND
		      read_type=1 
		<!--未读 的投诉消息  -->
	</select>
	
	
	
		<!--8.根据消息的id把消息设置为已处理-->
	
	<update id="dealReport">
	update t_message

	set
	  read_type=2
		
	where id =
	#{msgId,jdbcType=INTEGER}
</update>
</mapper>


